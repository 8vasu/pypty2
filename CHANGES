v1 -> v2

Lib/tty.py -> ./tty.py:
	+ mode_echo()
	+ mode_raw()
	+ getwinsz()
	+ login()
	setraw():
		+ return original termios to avoid multiple tcgetattr calls
	setcbreak():
		+ return original termios to avoid multiple tcgetattr calls

Lib/pty.py -> ./pty2.py:
	- master_open()
	- slave_open()
	openpty():
		+ set slave termios
		+ set slave winsize
	fork():
		+ set slave termios
		+ set slave winsize
		- some parts of fallback code
		+ use tty.login() in fallback code as replacement
	+ _getmask()
	+ _sigblock()
	+ _sigreset()
	+ _pty_setup()
	+ _winchset()
	select():
		+ return three empty lists immediately if first argument ("rlist") is empty
	_copy():
		+ return when select(fds, [], [])[0] is []; a cleaner alternative would be
		  to return when fds is [] (while fds: ...); however, one of the existing
		  tests depends on this
	spawn():
		+ set slave termios
		+ set slave winsize
		+ register SIGWINCH handler
		- use pty.fork()
		+ use pty2.openpty()
		+ use os.fork()
		+ use tty.login()
		+ block signals except during select.select() in _copy() and during os.waitpid();
		  even the SIGWINCH handler blocks signals to avoid os.close() failing on a slave descriptor;
		  if any descriptor of the slave remains open after child has exited, _copy() will hang on Linux
		- except OSError

Lib/test/test_pty.py -> ./test_pty.py
	+ expectedFailureOnBSD()
	PtyTest.test_basic() -> PtyTest.test_openpty():
		+ test slave termios setting
		+ test slave winsize setting
	+ PtyTest.test_master_read()